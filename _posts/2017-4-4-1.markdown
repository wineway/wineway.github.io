---
layout:     post
title:      "[笔记]Scala学习笔记(4)"
author:     wineway
tags: 		Scala 隐式(implicit) 笔记
subtitle:   Scala隐式详解
category:  project1
visualworkflow: true
---
## 隐式详解

隐式是Scala的一个强大且富有争议的特性,使用隐式可以有效减少代码,向已有类型注入新的方法,创建**领域特定语言(DSL)**

隐式之所以会产生争议,是因为除了通过 `Predef` 对象自动加载的那些隐式对象外,其他在源码中出现的隐式对象均不是本地对象,隐式对象一旦进入作用域,编译器便能执行该隐式对象以生成方法参数或将指定参数转化为预期类型,不过在阅读源码时,读者无法简单的指出什么时候会应用这些隐式值和隐式方法,而这可能会给该读者造成困惑,幸运的是,随着经验累积,你将能偶意识到什么时候会触发这些隐式对象,你也可以通过阅读这些对象的API来学习这些知识

### 隐式参数

```scala
def calcTex (amount: Float)(implicit rate: Float): Float = amount * rate

object SimpleStateSalesTax {
  implicit val rate: Float = 0.05F
}

case class ComplicatedSalesTaxData(
  baseRate: Float,
  isTaxHoliday: Boolean,
  storeId: Int
)

object ComplicatedSalesTax {
  private def extraTaxRateForStore(id: Int):Float = {
    //通过id推断商铺所在地,然后计算附加税
    0.0F
  }

  implicit def rate(implicit cstd: ComplicatedSalesTaxData): Float =
    if (cstd.isTaxHoliday) 0.0F
    else cstd.baseRate + extraTaxRateForStore(cstd.storeId)
}

{
  import SimpleStateSalesTax.rate

  val amount = 100F
  println(s"${calcTex(amount)}")
}

{
  import ComplicatedSalesTax.rate
  implicit val myStore = ComplicatedSalesTaxData(0.06F,false,1010)

  val amount = 100F
  println(s"${calcTex(amount)}")
}
```
以上是一个示例.

#### 调用 implicity 方法

```scala
import math.Ordering

case class MyList[A](list: List[A]) {
    def sortBy1[B](f: A => B)(implicit ord: Ordering[B]): List[A] =
    list.sortBy(f)(ord)

  def sortBy2[B : Ordering](f: A => B): List[A] =
    list.sortBy(f)(implicitly[Ordering[B]])
}

val list = MyList(List(1,3,5,2,4))

list sortBy1 (i => -i)
list sortBy2 (i => -i)
```

类型参数 `B: Ordering` 被称为 **上下文定界(context bound)** 暗示第二个参数列表(隐式参数列表)将接受 `Ordering[B]` 实例,然后使用 `Predef.implicity` 方法获取参数, `implicit` 方法会对传给函数所有标记为隐式参数的实例进行解析.请注意 `implicity` 需要的类型签名,本段代码中为 `Ordering[B]`

### 隐式参数适用场景

#### 执行上下文

>使用隐式参数传入"执行上下文"

#### 功能控制

比如通过引用授权令牌控制某些特定API操作只能供某些用户调用

#### 限定可用实例

Scala集合API就是利用这项技术解决一些设计上的问题

##### 应用Scala API

Scala API运用一种常见的手法,将一个 **builder** 作为隐式参数传到 `map` 方法中, 该 **builder** 知道如何构造一个同种类型的新容器,这实际上与定义在 `TraversableLike` 中的 `map` 方法签名很相似, `TraversableLike` 是一个 `trait` 他被 **混入** 了那些 **可遍历(traversable)** 的容器中.

```scala
trait TraversableLike[+A, +Repr] extends ... {
  ...
  def map[B, That](f: A => B)(implicit bf: CanBuildForm[Repr,B,That]): That = {}
  ...
}
```

`CanBuildForm` 是我们所使用的 **builder** 只要存在一个隐式构造器对象,你便能够构建出一个人以你想要的新容器, 容器通过 `Repr` 持有内部元素, `B` 类型是我们想创建目标集合的类型参数,因此 `map` 操作可以输出的集合类型是由当前存在的对应的 `CanBuildForm` 构造器实例所决定的,而这些构造器在当前作用域被声明为 **隐式对象** 假如你自定义了某些容器,你希望能够复用 `TraversableLike.map` 这样的方法实现,你需要创建 `CanBuildForm` 类型,并在这些容器代码中导入他们的隐式实例.
```scala
package progscala2.implicits {
    package scaladb {
    object implicits {
      import javadb.JRow

      implicit class SRow(jrow: JRow) {
        def get[T](colName: String)(implicit toT: (JRow,String) => T): T =
          toT(jrow, colName)
      }

      implicit val jrowToInt: (JRow,String) => Int =
        (jrow: JRow, colName: String) => jrow.getInt(colName)
      implicit val jrowToDouble: (JRow,String) => Double =
        (jrow: JRow, colName: String) => jrow.getDouble(colName)
      implicit val jrowToString: (JRow,String) => String =
        (jrow: JRow, colName: String) => jrow.getText(colName)
        }

            object DB {
              import implicits._

              def main(args: Array[String]) = {
                val row = javadb.JRow("one" -> 1, "two" -> 2.2, "three" -> "THREE!")

                val oneValue1: Int      = row.get("one")
                val twoValue1: Double   = row.get("two")
                val threeValue1: String = row.get("three")
                // val fourValue1: Byte    = row.get("four")  // won't compile

                println(s"one1   -> $oneValue1")
                println(s"two1   -> $twoValue1")
                println(s"three1 -> $threeValue1")

                val oneValue2   = row.get[Int]("one")
                val twoValue2   = row.get[Double]("two")
                val threeValue2 = row.get[String]("three")
                // val fourValue2    = row.get[Byte]("four")  // won't compile

                println(s"one2   -> $oneValue2")
                println(s"two2   -> $twoValue2")
                println(s"three2 -> $threeValue2")
              }
            }
          }
        }
```
- `get[T]` 方法中引用了 `jrow` 实例,但是并没有使用 `val` 关键字声明,所以 `jrow` 不是该类的成员,但是类型的其他成员依然可以使用它.
- 第一遍操作系统通过变量类型推导出 `T` 类型,第二种方法显示的指定了 `get[T]` 中的参数值
- 第一行注释不会把 `byte` 隐式转换为 `Int` 或者 `Double` ,因为有歧义,但是即使没有歧义也不会通过编译,因为"both functions extract too many bytes!"(啥意思..)
- 第二个注释便于我们回忆: 通过传入一个隐式参数以及定义符合我们允许的类型所对应的隐式值,我们就可以对用于参数化方法的类型进行限定

#### 隐式证据

有时候,我们只需要限定允许的类型,并不需要额外的处理:也就是我们需要"证据"表明提出的类型满足我们的需求

```scala
trait traversableOnce[+A] {
  ...
  def toMap[T, U](implicit ev: <:<[A, (T, U)]): immutable.Map[T, U] = {
    ...
  }
}
```
隐式参数 `ev` 就是我们的证据,它代表了我们必须实施的约束, `<:<` 是在 `Predef` 中定义的类型,该名字取于 `<:` 方法, `<:` 同样被用于限定类型参数,注意两个类型参数组成的类型可以用中缀表示法//这玩意貌似是个比较运算符

证据的意义仅仅是为了实施某一类型的约束,我们无需定义一个隐式值来执行额外的自定义工作, `Predef` 对象还定义了一个名为 `=:=` 的**证据**类型,他可以证明证据类型的等价关系,但该类型未得到广泛的使用

#### 绕开类型擦除带来的限制

```scala
object M {
  implicit object IntMarker                                          //
  implicit object StringMarker

  def m(seq: Seq[Int])(implicit i: IntMarker.type): Unit =           //
    println(s"Seq[Int]: $seq")

  def m(seq: Seq[String])(implicit s: StringMarker.type): Unit =     //
    println(s"Seq[String]: $seq")
}

import M._                                                           //
m(List(1,2,3))
```

- 关于 `StringMarker.type` 单例对象类型 [宏江的博客](http://hongjiang.info/scala-type-system-singleton-type/) 有详解
- 关于这个我觉得貌似就是单纯的做个区分方法的作用....然后再编译时确定类型,只是猜想,书上没详解,以后搞懂在回来编辑#

不使用隐式 `Int` 和 `String` 的值是因为: 假设当前作用域某一模块也定义了隐式 `String` 参数,那么两个隐式参数便会导致系统出错,首先加入第二个模块并未定义默认的隐式值,而希望用户能定义适用于应用程序的隐式值,如果用户没有定义该隐式值,那么该模块便会使用其他模块的隐式值,这可能导致无法预期的行为,如果用户定义了隐式值,那么两个出现在相同作用域的隐式值将导致二义性,比较安全的做法是减少使用隐式参数及隐式值,改用那些专门为此目的设计的特有类型

#### 改善报错信息

我们如果试图对一个未定义对应的 `CanBuildFrom` 的目标类型调用 `map` 方法,会发生:
```scala
scala> case class ListWrapper(list: List[Int])
defined class ListWrapper

scala> List(1,2,3).map[Int,ListWrapper](_ * 2)
<console>:10: error: Cannot construct a collection of type ListWrapper
with elements of type Int based on a collection of type List[Int].
              List(1,2,3).map[Int,ListWrapper](_*2)
                                              ^
```
`map`方法中明确注解了类型 `map[Int, ListWrapper]` 使得输出是 `ListWrapper` 而不是 `List[Int]`,注意错误信息不是通常我们无法找到某一隐式参数产生的默认信息,实际上在声明 `CanBuildFrom` 指定了一个名为 `scala.annotation.implicitNotFound` 的注解,该注解指定了那些错误信息的格式字符串, `CanBuildFrom` 声明体如下
```scala
@implicitNotFound(msg =
  "Cannot construct a collection of type ${To} with elements of type ${Elem}" +
  " based on a collection of type ${From}.")
trait CanBuildFrom[-From, -Elem, +To] {...}
```
你只能对那些专门为满足隐式参数而定义的,用作隐式值的类型使用这类注解,而这些注解无法用于像 `SRow.get[T]` 那样的接受隐式参数输入的方法之上,这也解释了为什么构建隐式应该使用自定义类型,而不应该使用常见类型.

#### 虚类型

我们之前已经学习了像 `CanBuildFrom` 那种可以添加行为的隐式参数,也使用了已经定义好的可作为 `API` 调用时的隐式值,如: 作用于集合的 `toMap` 方法和 `<:<` 类型隐式实例

接下来我们要进行的步骤是移除所有实例,仅留下需要的类型,这类定义好的没有任何实例的类型被称为 **虚类型(phantom type)** ,他仅表明我们只关心类型本身,表明我们不会使用该类型的任何实例

```scala
// A workflow for payroll calculations.

package progscala.implicits.payroll

sealed trait PreTaxDeductions
sealed trait PostTaxDeductions
sealed trait Final

// For simplicity, use Float for money. Not recommended...
case class Employee(
  name: String,
  annualSalary: Float,
  taxRate: Float,  // For simplicity, just 1 rate covering all taxes.
  insurancePremiumsPerPayPeriod: Float,
  _401kDeductionRate: Float,  // A pretax, retirement savings plan in the USA.
  postTaxDeductions: Float)

case class Pay[Step](employee: Employee, netPay: Float)

object Payroll {
  // Biweekly paychecks. Assume exactly 52 weeks/year for simplicity.
  def start(employee: Employee): Pay[PreTaxDeductions] =
    Pay[PreTaxDeductions](employee, employee.annualSalary / 26.0F)

  def minusInsurance(pay: Pay[PreTaxDeductions]): Pay[PreTaxDeductions] = {
    val newNet = pay.netPay - pay.employee.insurancePremiumsPerPayPeriod
    pay copy (netPay = newNet)
  }

  def minus401k(pay: Pay[PreTaxDeductions]): Pay[PreTaxDeductions] = {
    val newNet = pay.netPay - (pay.employee._401kDeductionRate * pay.netPay)
    pay copy (netPay = newNet)
    }

      def minusTax(pay: Pay[PreTaxDeductions]): Pay[PostTaxDeductions] = {
        val newNet = pay.netPay - (pay.employee.taxRate * pay.netPay)
        pay copy (netPay = newNet)
      }

      def minusFinalDeductions(pay: Pay[PostTaxDeductions]): Pay[Final] = {
        val newNet = pay.netPay - pay.employee.postTaxDeductions
        pay copy (netPay = newNet)
      }
    }

    object CalculatePayroll {
      def main(args: Array[String]) = {
        val e = Employee("Buck Trends", 100000.0F, 0.25F, 200F, 0.10F, 0.05F)
        val pay1 = Payroll start e
        // 401K and insurance can be calculated in either order.
        val pay2 = Payroll minus401k pay1
        val pay3 = Payroll minusInsurance pay2
        val pay4 = Payroll minusTax pay3
        val pay  = Payroll minusFinalDeductions pay4
        val twoWeekGross = e.annualSalary / 26.0F
        val twoWeekNet   = pay.netPay
        val percent      = (twoWeekNet / twoWeekGross) * 100
        println(s"For ${e.name}, the gross vs. net pay every 2 weeks is:")
        println(
          f"  $$${twoWeekGross}%.2f vs. $$${twoWeekNet}%.2f or ${percent}%.1f%%")
      }
    }
```
这些 `sealed trait` 本身不包含数据,,而且我们无法在其他文件中实现这些 `trait` ,因此这些 `trait` 只能起到标志作用

上述代码不是十分简洁,我们引入了 **管道** 操作符 `|>`(DSL)
```scala
package progscala.implicits.payroll
import scala.language.implicitConversions

object Pipeline {
  implicit class toPiped[V](value:V) {
    def |>[R] (f : V => R) = f(value)
  }
}

object CalculatePayroll2 {
  def main(args: Array[String]) = {
      import Pipeline._
        import Payroll._

        val e = Employee("Buck Trends", 100000.0F, 0.25F, 200F, 0.10F, 0.05F)
        val pay = start(e) |>
          minus401k        |>
          minusInsurance   |>
          minusTax         |>
          minusFinalDeductions
        val twoWeekGross = e.annualSalary / 26.0F
        val twoWeekNet   = pay.netPay
        val percent      = (twoWeekNet / twoWeekGross) * 100
        println(s"For ${e.name}, the gross vs. net pay every 2 weeks is:")
        println(
          f"  $$${twoWeekGross}%.2f vs. $$${twoWeekNet}%.2f or ${percent}%.1f%%")
      }
    }
```
 `|>` 对 `Payroll.minus401k(pay1)` 转化为 `pay1 |> Payroll.minus401k`

#### 隐式参数遵循规则

|隐式参数遵循规则|
|:-------|
|1. 只有最后一个参数列表中允许出现隐式参数,这也适用于只有一个参数列表的情况|
|2. `implicit` 关键字必须出现在参数列表最左边,而且只能出现一次,列表中出现在 `implicit` 之后的参数都不是 "非隐式" 的|
|3. 假如参数列表以 `implicit` 关键字开头,那么所有参数都是隐式的|

### 隐式转换

创建 `pair` 的几种方法:
```scala
(1, "one")
1 -> "one"
1 → "one"
Tuple2(1,"one")
Pair(1,"one") //Scala不推荐这种方法
```
事实上,Scala根本不知道 `a -> b` 意味着什么,这种字面量格式实际上运用了方法 `->` 和一个特殊的Scala特性,隐式转换,通过隐式转换我们可以在任意两种类型值中插入函数 `->` ,与此同时,由于 `a -> b` 并不是元组,Scala必须用过某些方试将其转换为元祖
```scala
implicit final class ArrowAssoc[A](val self: A) {
  def -> [B](y: B):Tuple2[A, B] = Tuple2(self, y)
}
```
由于 `ArrowAssoc` 被声明为 `implicit` 类,所以编译器执行以下逻辑:
- 编译器发现我们试图对 `String` 对象之行 `->` 方法
- 由于 `String` 未定义 此方法,编译器将检查当前作用域是否存在定义了该方法的隐式转换
- 编译器发现 `ArrowAssoc` 类
- 创建 `ArrowAssoc` 对象,并传入 `"one"` 字符串
- 编译器将解析表达式中 `->` 部分代码,并确认整个表达式类型与 `Map.apply` 方法的预期类型吻合,即两者均为 `pair` 实例

>尽管隐式方法仍被使用,但我们现在只有将某类型转换为存在类型是才使用,滥用隐式方法会导致难以调试的行为,如果你希望启用此类特性,你应该通过 `import scala.language.implicitConversions` 开启此特性,也可以通过全局的编译器选项`-language: implicitConversions` 开启此特性

以下是编译器进行查找和使用转换方法时的转换规则
1. 加入调用的对象和方法成功通过了组合类型检查,那么类型转换不会执行
1. 编译器只会考虑用了 `implicit` 关键字的类和方法
1. 编译器只会考虑当前作用域内的隐式类隐式方法,以及目标类型的伴生对象中定义的隐式方法(后续部分继续讨论此种情况)
1. 隐式方法无法穿行处理,我们无法通过一个中间类型,使用串行的饮食方法将起始类型转换为目标类型,编译器执行隐式转换时只会考虑那些接受单一类型实例输入且返回目标类型实例的方法
1. 假如当前适合多条转换方法,那么将不会执行转换操作

注意, 规则3提到伴生对象中定义的隐式方法有以下含义:
- 假如隐式转换出现在当前作用域之外,不会执行该隐式转换
- 假如在当前作用域内,意味着隐式转换是在封闭作用域内声明的,或当前作用域已经导入隐式转换所在的其他作用域,比方说导入了其他作用域中某一个定义了一些隐式转换的对象

不过当需要执行转换时,假如转换的目标类型的伴生对象中定义了转换方法,那么编译器会自动导入伴生对象的作用域,并最后查找该作用域(有的话就不会查找)

>使用 `implicit` 对象或名为 `implicits` 的特殊包的好处是:读者能更清楚哪个 `import` 语句导入了代码使用的自定义隐式

在Scala自带的"封装"类型中定义的隐式转换会一直出现在当前作用域中,这些隐式转换更确切的将被定义在 `Predef` 中

`Range` 类型也是一类封装类型,例如: `1 to 10 by 3` 中`to` , `by` 以及Scala独有的 `util` 单词都是封装对象中的方法,他们并不是Scala关键字,例如 `scala.runtime.RichInt` 封装了 `Int` 类型,它包含这些方法,Scala在同一个包中定义了适合于其他数值类型的类似封装类型:`RichLong`,`RichFloat`等,而 `scala.math.BigInt` 和 `scala.math.BigDecimal`本身就是Java同名类的封装类型,因此他们没有自己的封装类型,他们本身实现了 `to` ,`util`,和 `by` 方法

#### 构建独有的字符串插入器

```scala
import scala.util.parsing.json._

object Interpolators {
  implicit class jsonForStringContext(val sc: StringContext) {       //
    def json(values: Any*): JSONObject = {                           //
      val keyRE = """^[\s{,]*(\S+):\s*""".r                          //
      val keys = sc.parts map {                                      //
        case keyRE(key) => key
        case str => str
      }
      val kvs = keys zip values                                      //
      JSONObject(kvs.toMap)
        }
        }
      }

      import Interpolators._

      val name = "Dean Wampler"
      val book = "Programming Scala, Second Edition"

      val jsonobj = json"{name: $name, book: $book}"                       //
      println(jsonobj)
```
- .parts 返回不含插值的每段,`case keyRE(key) => key` 标记下这段(坑死我了....没注意是StringContext)
- `zip` 将两个集合中元素压缩成二元元组

#### 表达式问题

在不修改源代码的情况下扩展源代码的期望被称为**表达式问题(expression problem)**

面向对象变成通过子 *类型化(subtyping)* 解决了这一问题,更精确的讲是 *子类型多态(subtype polymorphism)* : 当需要对某些行为进行修改时,我们会首先编写抽象体,之后是用抽象体的继承类修改行为, Bertrand Meyer提出的 `open/closed principle` 对 `oop` 这一方法进行了概述,在这一准则中,基类声明了抽象的行为,而子类型则在不修改基类型的情况下对抽象行为进行适当的修改

这个问题引发了**单一性职责原则(single responsibility principle)** 这一经典设计原则,该原则鼓励我们在定义抽象以及实现体时,只提供单一行为

通过Scala隐式转换特征,我们可以得到另外一种通过静态类型实现元编程的方法,我们称之为 **类型类(type class)** Haskell率先提出这一观点,可以参考文章["A Gentle Introduction to Haskell"](https://www.haskell.org/tutorial/classes.html).如果某对象属于某类型类,那么它必须实现类型类所定义的行为,与通常意义上的类相比,类型类更接近于接口(不要和Scala常用类所混淆)

### 类型类模式

```scala
case class Address(street: String, city: String)
case class Person(name: String, address: Address)

trait ToJSON {
  def toJSON(level: Int = 0): String

  val INDENTATION = "  "
  def indentation(level: Int = 0): (String,String) =
    (INDENTATION * level, INDENTATION * (level+1))
}

implicit class AddressToJSON(address: Address) extends ToJSON {
  def toJSON(level: Int = 0): String = {
    val (outdent, indent) = indentation(level)
    s"""{
      |${indent}"street": "${address.street}",
      |${indent}"city":   "${address.city}"
      |$outdent}""".stripMargin
  }
}

implicit class PersonToJSON(person: Person) extends ToJSON {
  def toJSON(level: Int = 0): String = {
    val (outdent, indent) = indentation(level)
    s"""{
      |${indent}"name":    "${person.name}",
      |${indent}"address": ${person.address.toJSON(level + 1)}
      |$outdent}""".stripMargin
  }
}

val a = Address("1 Scala Lane", "Anytown")
val p = Person("Buck Trends", a)

println(a.toJSON())
println()
println(p.toJson())
```
Scala不允许同时使用 `case` 关键字和 `implicit` 关键字,也就是说隐式类不能同时是一个 `case` 类由于 `case` 类不会执行通过隐式自动生成的代码,因此隐式 `case` 类本身就没有任何意义..
```scala
case class TreeNode[T](data: T, children: Seq[TreeNode[T]] = Nil)
implicit class p[T](t: TreeNode[T]){
  def aa :Unit = {
    println("hello")
  }
}
```
测试了一下,这个貌似不是说 `case` 不可以隐式转换

我们通过使用该机制为已经存在的类添加了方法,因此 *扩展方法(extension method)* 是类型类的另一种用途,另一方面,与面向对象继承关系中常出现的子类型多态不同, `toJSON` 方法提供的堕胎行为并未绑定类型系统,因此类型类提供的这一功能被称为 *特设多态(ad hoc polymorphism)*

我们经常会有这样的错觉:如果定义了一组类,每个类只提供某一特定行为,对于大多数客户而言,这些特定行为并没什么作用,.而类型类最适用于这种情况,对于这组类应用类型类模式能够使客户从中收益,善用该模式能够在维护单一职责原则的同时平衡多个客户的需求

### 隐式所导致的技术问题

-  你需要花时间编写用于定义隐式的额外代码,而且编译器也必须费大量时间的处理隐式
-  隐式转换同样会造成额外的运行开销,这是因为封装类型会引入额外的中间层,尽管编译器会内联某些方法调用,而JVM也会执行一些额外的优化,但是这样还是会有额外的开销,后面的 *值类型* 会讨论如何在编译期间消除值类型的额外运行开销.

```scala
 trait Stringizer[+T] {
  def stringize: String
}

implicit class AnyStringizer(a: Any) extends Stringizer[Any] {
  def stringize: String = a match {
    case s: String => s
    case i: Int => (i*10).toString
    case f: Float => (f*10.1).toString
    case other =>
      throw new UnsupportedOperationException(s"Can't stringize $other")
  }
}

val list: List[Any] = List(1, 2.2F, "three", 'symbol)

list foreach { (x:Any) =>
  try {
    println(s"$x: ${x.stringize}")
  } catch {
    case e: java.lang.UnsupportedOperationException => println(e)
  }
}
```
这种实现非常不美观同时违背了面向对象编程的一条核心规则:你不应该使用 `switch` 语句对可能发生的变化的类型判断,相反,你应该使用多态分发任务,这类似于 `toString` 方法在Scala中的应用

最后我们将列出帮助我们避免某些潜在问题的一些技巧.
- 无论如何都要为隐式转换方法指定返回类型,否则类型推导推断出的返回类型可能会导致预料以外的结果
- 虽然编译器会执行一些方便用户的转换,但是目前看来这些转换带来的麻烦多于益处
>假如你为某一类型定义 `+` 方法,并试图将此方法应用到某不属于该类型的实例上,那么编译器会调用该市里的 `toString` 方法,这解释了特定情况下出现 `String` 是错误类型的奇怪错误
> 如果有必要的话,编译器会将方法输入参数自动组合成一个元组,有时候这些行为会给人造成困扰,2.11版本现在已经会对此抛出警告信息

```scala
scala> def m(pair:Tuple2[Int,String]) = println(pair)

scala> m(1, "two")
<console>:9: warning: Adapting argument list by creating a 2-tuple:
  this may not be what you want.
        signature: m(pair: (Int, String)): Unit
  given arguments: 1, "two"
 after adaptation: m((1, "two"): (Int, String))
              m(1,"two")
               ^
(1,two)
```

### 隐式解析规则

根据隐式所处情景不同,会存在隐式方法,隐式值和隐式类这三类隐式,在下面的讨论中使用值代替隐式:
- Scala会解析无需输入前缀路径的类型兼容隐式值,也就是说,隐式值定义在相同作用域中,
- Scala会解析那些导入带当前作用域的隐式值
- 导入的隐式值优先度高于已经存在在当前作用域的隐式值
- 存在多个可能类型兼容的的匹配,挑选匹配度最高的隐式
- 如果两个或多个隐式值可能引发歧义,编译器错误会被触发
- Scala库中的隐式常常会被编译器加载到作用域中,而其他语言库中定义的隐式则需要 `import`

### Scala内置的各种隐式

Scala 2.11库源代码中定义了300+隐式方法,隐式值和隐式类性.他们中大多数都是隐式方法,而隐式方法中多数被用于讲一个类型转换成另一个类型,接下来会分组对这些隐式类性进行讨论,让读者能够"感觉到" 隐式的类性

1. `AnyVal` 类型的所有对象都定义了丰富的转换方法:(太多了,直接复制了)

```scala
 object Int {
  ...
  implicit def int2long(x: Int): Long = x.toLong
  ...
}
// The following code snippits list these AnyVal implicit conversions. Note that because of the implicit conversion feature, the Scala grammar doesn’t need to implement the most common type conversions that other language grammars have to implement.
// From the Byte companion object:
implicit def byte2short(x: Byte): Short = x.toShort
implicit def byte2int(x: Byte): Int = x.toInt
implicit def byte2long(x: Byte): Long = x.toLong
implicit def byte2float(x: Byte): Float = x.toFloat
implicit def byte2double(x: Byte): Double = x.toDouble
//From the Char companion object:
// From the scala.Char companion object:
implicit def char2int(x: Char): Int = x.toInt
implicit def char2long(x: Char): Long = x.toLong
implicit def char2float(x: Char): Float = x.toFloat
implicit def char2double(x: Char): Double = x.toDouble
//From the Short companion object:
implicit def short2int(x: Short): Int = x.toInt
implicit def short2long(x: Short): Long = x.toLong
implicit def short2float(x: Short): Float = x.toFloat
implicit def short2double(x: Short): Double = x.toDouble
//From the Int companion object:
implicit def int2long(x: Int): Long = x.toLong
implicit def int2float(x: Int): Float = x.toFloat
implicit def int2double(x: Int): Double = x.toDouble
//From the Long companion object:
implicit def long2float(x: Long): Float = x.toFloat
implicit def long2double(x: Long): Double[…]
//From the Float companion object:
implicit def float2double(x: Float): Double = x.toDouble
// The scala.math types BigInt and BigDecimal have converters from many of the AnyVal types and from the corresponding Java implementations. From the BigDecimal companion object:
implicit def int2bigDecimal(i: Int): BigDecimal = apply(i)
implicit def long2bigDecimal(l: Long): BigDecimal = apply(l)
implicit def double2bigDecimal(d: Double): BigDecimal = ...
implicit def javaBigDecimal2bigDecimal(x: BigDec): BigDecimal = apply(x)
// The calls to apply are invocations of the BigDecimal.apply factory methods. These implicits are a convenient, alternative way of invoking these methods.
// From the BigInt companion object:
implicit def int2bigInt(i: Int): BigInt = apply(i)
implicit def long2bigInt(l: Long): BigInt = apply(l)
implicit def javaBigInteger2bigInt(x: BigInteger): BigInt = apply(x)
//Option can be converted to a list of zero or one items:
implicit def option2Iterable[A](xo: Option[A]): Iterable[A] = xo.toList
```
2. `Predef` 中定义了大多数隐式定义,其中一些隐式定义包含了 `@inline` (鼓励编译器努力将其调用内联,与之对应的是 `@noinline`)

一些方法能将某一类型转化为另一类型:
```scala
@inline implicit def augmentString(x: String): StringOps = new StringOps(x)
@inline implicit def unaugmentString(x: StringOps): String = x.repr
implicit def tuple2ToZippedOps[T1, T2](x: (T1, T2))
  = new runtime.Tuple2Zipped.Ops(x)
implicit def tuple3ToZippedOps[T1, T2, T3](x: (T1, T2, T3))
  = new runtime.Tuple3Zipped.Ops(x)
implicit def genericArrayOps[T](xs: Array[T]): ArrayOps[T] = ...

implicit def booleanArrayOps(xs: Array[Boolean]): ArrayOps[Boolean] =
  = new ArrayOps.ofBoolean(xs)
...      // Similar functions for the other AnyVal types.
implicit def refArrayOps[T <: AnyRef](xs: Array[T]): ArrayOps[T]
  = new ArrayOps.ofRef[T](xs)

@inline implicit def byteWrapper(x: Byte) = new runtime.RichByte(x)
...      // Similar functions for the other AnyVal types.

implicit def genericWrapArray[T](xs: Array[T]): WrappedArray[T] = ...
implicit def wrapRefArray[T <: AnyRef](xs: Array[T]): WrappedArray[T] = ...
implicit def wrapIntArray(xs: Array[Int]): WrappedArray[Int] = ...
...      // Similar functions for the other AnyVal types.

implicit def wrapString(s: String): WrappedString = ...
implicit def unwrapString(ws: WrappedString): String = ...
```
3. `scala.collection.convert` 包定义了一些 `trait` 提供了 Java 容器与 Scala 容器的转换方法,事实上出于性能考虑Scala会尽可能避免类型转换,但是目标集合的抽象体是建立在底层容器的基础上,性能影响不大

```scala
Here are the “decorations” of Scala collections as Java collections defined in DecorateAsJava. The return type annotations are wrapped to fit the page and the ju and jl are import aliases for java.lang and java.util in the actual source code for DecorateAsJava. The AsJava* types are helpers for exposing operations:
implicit def asJavaIteratorConverter[A](i : Iterator[A]):
  AsJava[ju.Iterator[A]] = ...
implicit def asJavaEnumerationConverter[A](i : Iterator[A]):
  AsJavaEnumeration[A] = ...
implicit def asJavaIterableConverter[A](i : Iterable[A]):
  AsJava[jl.Iterable[A]] = ...
implicit def asJavaCollectionConverter[A](i : Iterable[A]):
  AsJavaCollection[A] = ...
implicit def bufferAsJavaListConverter[A](b : mutable.Buffer[A]):
  AsJava[ju.List[A]] = ...
implicit def mutableSeqAsJavaListConverter[A](b : mutable.Seq[A]):
  AsJava[ju.List[A]] = ...
implicit def seqAsJavaListConverter[A](b : Seq[A]):
  AsJava[ju.List[A]] = ...
implicit def mutableSetAsJavaSetConverter[A](s : mutable.Set[A]):
  AsJava[ju.Set[A]] = ...
implicit def setAsJavaSetConverter[A](s : Set[A]):
  AsJava[ju.Set[A]] = ...
implicit def mutableMapAsJavaMapConverter[A, B](m : mutable.Map[A, B]):
  AsJava[ju.Map[A, B]] = ...
implicit def asJavaDictionaryConverter[A, B](m : mutable.Map[A, B]):
  AsJavaDictionary[A, B] = ...
implicit def mapAsJavaMapConverter[A, B](m : Map[A, B]):
  AsJava[ju.Map[A, B]] = ...
implicit def mapAsJavaConcurrentMapConverter[A, B](m: concurrent.Map[A, B]):
  AsJava[juc.ConcurrentMap[A, B]] = ...

We can decorate Java collections as Scala collections using implicits defined in DecorateAsScala:

  implicit def asScalaIteratorConverter[A](i : ju.Iterator[A]):
    AsScala[Iterator[A]] = ...
  implicit def enumerationAsScalaIteratorConverter[A](i : ju.Enumeration[A]):
    AsScala[Iterator[A]] = ...
  implicit def iterableAsScalaIterableConverter[A](i : jl.Iterable[A]):
    AsScala[Iterable[A]] = ...
  implicit def collectionAsScalaIterableConverter[A](i : ju.Collection[A]):
    AsScala[Iterable[A]] = ...
  implicit def asScalaBufferConverter[A](l : ju.List[A]):
    AsScala[mutable.Buffer[A]] = ...
  implicit def asScalaSetConverter[A](s : ju.Set[A]):
    AsScala[mutable.Set[A]] = ...
  implicit def mapAsScalaMapConverter[A, B](m : ju.Map[A, B]):
    AsScala[mutable.Map[A, B]] = ...
  implicit def mapAsScalaConcurrentMapConverter[A, B](m: juc.ConcurrentMap[A, B]):
    AsScala[concurrent.Map[A, B]] = ...
  implicit def dictionaryAsScalaMapConverter[A, B](p: ju.Dictionary[A, B]):
    AsScala[mutable.Map[A, B]] = ...
  implicit def propertiesAsScalaMapConverter(p: ju.Properties):
    AsScala[mutable.Map[String, String]] = ...
```
尽管这些方法都是定义在 `trait` 中,不过 `JavaConverts` 对象为你提供了导入这些方法的快捷方式: `import scala.collections.JavaConverts._`

4. 但是更多时候,你希望选择输出容器的类型,这时候有 `WrapAsJava` , `WrapAsScala` 中额外的一些方法:

```scala
Here are the WrapAsJava methods:
implicit def asJavaIterator[A](it: Iterator[A]): ju.Iterator[A] = ...
implicit def asJavaEnumeration[A](it: Iterator[A]): ju.Enumeration[A] = ...
implicit def asJavaIterable[A](i: Iterable[A]): jl.Iterable[A] = ...
implicit def asJavaCollection[A](it: Iterable[A]): ju.Collection[A] = ...
implicit def bufferAsJavaList[A](b: mutable.Buffer[A]): ju.List[A] = ...
implicit def mutableSeqAsJavaList[A](seq: mutable.Seq[A]): ju.List[A] = ...
implicit def seqAsJavaList[A](seq: Seq[A]): ju.List[A] = ...
implicit def mutableSetAsJavaSet[A](s: mutable.Set[A]): ju.Set[A] = ...
implicit def setAsJavaSet[A](s: Set[A]): ju.Set[A] = ...
implicit def mutableMapAsJavaMap[A, B](m: mutable.Map[A, B]): ju.Map[A, B] =...
implicit def asJavaDictionary[A, B](m: mutable.Map[A, B]): ju.Dictionary[A, B]
implicit def mapAsJavaMap[A, B](m: Map[A, B]): ju.Map[A, B] = ...
implicit def mapAsJavaConcurrentMap[A, B](m: concurrent.Map[A, B]):
  juc.ConcurrentMap[A, B] = ...
Here are the WrapAsScala methods:
implicit def asScalaIterator[A](it: ju.Iterator[A]): Iterator[A] = ...
implicit def enumerationAsScalaIterator[A](i: ju.Enumeration[A]):
  Iterator[A] = ...
implicit def iterableAsScalaIterable[A](i: jl.Iterable[A]): Iterable[A] = ...
implicit def collectionAsScalaIterable[A](i: ju.Collection[A]): Iterable[A]=...
implicit def asScalaBuffer[A](l: ju.List[A]): mutable.Buffer[A] = ...
implicit def asScalaSet[A](s: ju.Set[A]): mutable.Set[A] = ...
implicit def mapAsScalaMap[A, B](m: ju.Map[A, B]): mutable.Map[A, B] = ...
implicit def mapAsScalaConcurrentMap[A, B](m: juc.ConcurrentMap[A, B]):
  concurrent.Map[A, B] = ...
implicit def dictionaryAsScalaMap[A, B](p: ju.Dictionary[A, B]):
  mutable.Map[A, B] = ...
implicit def propertiesAsScalaMap(p: ju.Properties):
  mutable.Map[String, String] = ...
[source,scala]
```
导入这些方法:`import.scala.collections.JavaConversions._`

5. Scala提供了一些 `Ordering[T]` 类型的隐式值,其中 `T` 是一个 `String` 类型值, `String` 类型是一类 `AnyVal` 类型,可以转换为 `Numeric` 类型或用户自定义的顺序之(数值类型是对作用于数值的常见操作的一种抽象),[`Ordered[T]` 中查看定义](http://www.scala-lang.org/api/current/scala/math/Ordering.html), 在 `Ordering[T]` 类型中存在以下一些隐式定义:

```scala
implicit def ordered[A <% Comparable[A]]: Ordering[A] = ...
implicit def comparatorToOrdering[A](implicit c: Comparator[A]):Ordering[A]=...
implicit def seqDerivedOrdering[CC[X] <: scala.collection.Seq[X], T](
  implicit ord: Ordering[T]): Ordering[CC[T]] = ...
implicit def infixOrderingOps[T](x: T)(implicit ord: Ordering[T]):
  Ordering[T]#Ops = ...
implicit def Option[T](implicit ord: Ordering[T]): Ordering[Option[T]] = ...
implicit def Iterable[T](implicit ord: Ordering[T]): Ordering[Iterable[T]] =...
implicit def Tuple2[T1, T2](implicit ord1: Ordering[T1], ord2: Ordering[T2]):
   Ordering[(T1, T2)] = ...
```
6. 最后还有一些可以转换可用于构建 "mini-DSLs" 得病发或管理进程

首先, `scala.concurrent.duration` 包提供了一些用于定义持续时间的方法

```scala
implicit def pairIntToDuration(p: (Int, TimeUnit)): Duration = ...
implicit def pairLongToDuration(p: (Long, TimeUnit)): FiniteDuration = ...
implicit def durationToPair(d: Duration): (Long, TimeUnit) = ...
```
下面列举了一些各种各样的转换方法,摘自 `scala.concurrent` 包的多个文件:
```scala
// scala.concurrent.FutureTaskRunner:
implicit def futureAsFunction[S](x: Future[S]): () => S

// scala.concurrent.JavaConversions:
implicit def asExecutionContext(exec: ExecutorService):
  ExecutionContextExecutorService = ...
implicit def asExecutionContext(exec: Executor): ExecutionContextExecutor = ...

// scala.concurrent.Promise:
private implicit def internalExecutor: ExecutionContext = ...

// scala.concurrent.TaskRunner:
implicit def functionAsTask[S](fun: () => S): Task[S] = ...

// scala.concurrent.ThreadPoolRunner:
implicit def functionAsTask[S](fun: () => S): Task[S] = ...
implicit def futureAsFunction[S](x: Future[S]): () => S = ...
```

最后,`Process` 提供了一些与UNIX shell命令类似的方法,以支持操作系统进程操作:
```scala
 implicit def buildersToProcess[T](builders: Seq[T])(
  implicit convert: T => Source): Seq[Source] = ...
implicit def builderToProcess(builder: JProcessBuilder): ProcessBuilder = ...
implicit def fileToProcess(file: File): FileBuilder = ...
implicit def urlToProcess(url: URL): URLBuilder = ...
implicit def stringToProcess(command: String): ProcessBuilder = ...
implicit def stringSeqToProcess(command: Seq[String]): ProcessBuilder = ...
```

### 合理使用隐式

在构建DSL以及简化代码的API过程中,隐式参数及只是一种非常强大的工具,不过由于传递隐式参数以及隐式值几乎是不可见的,这就增加了代码的理解难度,所以我们应该合理使用隐式

有一种可以提高隐式可见性的方法,即将隐式值统一放到名为 `implicit` 的特殊包或名为 `Implicits` 的对象中,这种方式使得读者一旦遇到导入语句中的 `implicit` 字样便会留意除了Scala内置隐式外还存在一些其他的隐式

--------
附录: xjb写的代码,待修改
```scala
case class TreeNode[T](data: T, children: Seq[TreeNode[T]] = Nil)
object TreeNode {
  var tmp: Seq[String] = Nil
  def pr: PartialFunction[Any,Seq[String]] = {
    case a: String => tmp = tmp:+a;tmp
    case a+:Nil => pr(a)
    case a:Seq[Any] => pr(a.head);pr(a.tail)
  }

  def asciiDisplay(root: TreeNode[String]): Seq[String] = {
    def build(root: TreeNode[String], blank: Int = 0, realBlank: String =" "): Seq[Any] = root match {
      case TreeNode(_,Nil) => s"${if(blank<2){realBlank * blank}else{""}}${if(blank>1){" |"+(realBlank*(blank-2))}else{""}}+-${root.data}"+:Nil
      case x => s"${if(blank<2){realBlank * blank}else{""}}${if(blank>1){" |"+(realBlank*(blank-2))}else{""}}+-${root.data}" +: (root.children.map(build(_, blank+1)))
    }
    pr(build(root))
  }
}
```
--------------
`A <% B` : 表示A一定可以转换为B(我记得这个记过啊..怎么找不到)
