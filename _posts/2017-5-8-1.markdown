---
layout:     post
title:      "[笔记]Scala.js tutorial"
author:     wineway
tags: 		Scalajs 未完成
subtitle:   Scala.js 指南
category:  project1
visualworkflow: true
---

正好最近有web开发课程,顺便学习一下 `scala.js` 好了

# 建立 sbt 工程

新建 sbt 工程,添加 `scala.js sbt plugin` ,并在工程中 enable:

```
//project/plugins.sbt
addSbtPlugin("org.scala-js" % "sbt-scalajs" % "0.6.16")
```

```
//build.sbt
enablePlugins(ScalaJSPlugin)

name := "Scala.js Tutorial"
scalaVersion := "2.12.2" // or any other Scala version >= 2.10.2

// This is an application with a main method
scalaJSUseMainModuleInitializer := true
```

```
//project/build.properties
sbt.version=0.14.0
```

# 建立 HelloWorld 应用

```scala
//src/main/scala/tutorial/webapp/TutorialApp.scala

package tutorial.webapp

import scala.scalajs.js.JSApp

object TutorialApp extends JSApp {
  def main(): Unit = {
    println("Hello world!")
  }
}
```
然后 `run` 可以看到以下输出

```scala
//前面会更新好多依赖
[info] Compiling 1 Scala source to /home/wineway/Documents/web/target/scala-2.12/classes...
[info] 'compiler-interface` not yet compiled for Scala 2.12.2. Compiling...
[info]   Compilation completed in 12.137 s
[info] Fast optimizing /home/wineway/Documents/web/target/scala-2.12/scala-js-tutorial-fastopt.js
[info] Running tutorial.webapp.TutorialApp
Hello world!
[success] Total time: 86 s, completed May 8, 2017 10:12:26 AM
```


>npm install source-map-support 使用这个查看文件树

# 集成 HTML

1. 生成编译后的 单个 JS 文件
2. 创建 HTML 页面包含 上文件

## 生成 JS

在 sbt 中使用 `fastOptJS` 命令将 `scala` 编译为 `.js` 生成在 `target/scala-2.12/scala-js-tutorial-fastopt.js` ,过程中可能执行一些优化.

## 创建 HTML 页面

```HTML
<!--index-dev.html-->

<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>The Scala.js Tutorial</title>
  </head>
  <body>
    <!-- Include Scala.js compiled code -->
    <script type="text/javascript" src="./target/scala-2.12/scala-js-tutorial-fastopt.js"></script>
  </body>
</html>
```
因为 `TutorialApp` 继承了 `js.JSApp` 并且我们在 `build` 中设置了 `scalaJSUseMainModuleInitializer := true` , `TutorialApp.main()` 方法会在 `-fastopt.js` 结尾自动调用,然后打开这个HTML,你会在浏览器JS控制台看到 `HelloWorld` 信息

# 使用 DOM

## 添加 DOM 库

在 `sbt` 中添加 `libraryDependencies += "org.scala-js" %%% "scalajs-dom" % "0.9.1"` 然后 `reload`

## 使用 DOM 库

```scalajs
import org.scalajs.dom
import dom.document
```

`dom` 是 JS DOM 的根,对应的是 JS 的 global scope,我们为了方便额外的导入了 `document` ,我们通过添加代码添加一个 `<p>` 节点

```scala
def appendPar(targetNode: dom.Node, text: String): Unit = {
  val parNode = document.createElement("p")
  val textNode = document.createTextNode(text)
  parNode.appendChild(textNode)
  targetNode.appendChild(parNode)
}
```
然后在 `main` 函数中添加:

```scala
def main(): Unit = {
  appendPar(document.body, "Hello World")
}
```

然后重新编译,也可以在 sbt 中使用 `~fastOptJS` 命令使其不断编译

# 接受用户输入

我们添加一个方法到 `TutorialApp` ,当点击按钮时候将会被调用,添加之前需要导入头文件 `import scala.scalajs.js.annotation.JSExportTopLevel`,这里有更多 [Export Scala.js API to JavaScript](https://www.scala-js.org/doc/interoperability/export-to-javascript.html):

```scala
@JSExportTopLevel("addClickedMessage")//告诉编译器作为JS的 top-level 函数是可调用的
def addClickedMessage(): Unit = {
  appendPar(document.body, "You clicked the button!")
}
```
然后我们在 HTML 文件中添加 `click` 按钮

```scala
<button id="click-me-button" type="button" onclick="addClickedMessage()">
  Click me!
</button>
```

# 使用 jQuery

`build.sbt` 中替换 `libraryDependencies += "be.doeraene" %%% "scalajs-jquery" % "0.9.1"`

jQuery 依赖 DOM 所以没有必要添加之前的 DOM,中断 `~fastOptJS` ,然后 `reload` ,然后开始 `~fastOptJS`

在 `TutorialApp.scala` 中移除 DOM ,添加 jQuery `import org.scalajs.jquery.jQuery` ,然后我们可以在代码中使用 `jQuery` 对象了

我们现在可以移除 `appendPar` 和调用用下面这些代码: `jQuery("body").append("<p>[message]</p>")` ,`[message]` 是原始传递到 `appendPar` 的字符串,如果你尝试刷新你的页面你会发现他不工作而且在控制台报错,在此之前你需要添加 JS 库依赖,在 build.sbt 中添加
```scala
skip in packageJSDependencies := false
jsDependencies +=
  "org.webjars" % "jquery" % "2.1.4" / "2.1.4/jquery.js"
```
这个会创建 `scala-js-tutorial-jsdeps.js` 然后在 HTML 文件中添加

```HTML
<!-- Include JavaScript dependencies -->
<script type="text/javascript" src="./target/scala-2.12/scala-js-tutorial-jsdeps.js"></script>
```

然后就可以编译使用了

# 使用 scala.js setupUI

我们想要移除 `onclick` 属性,在移除这个属性之后我们添加 `setupUI` 方法,我们使用 `jQuery` 去添加按钮的事件控制,我们也移除了 `HelloWorld` 信息到函数中.

```scala
def setupUI(): Unit = {
    jQuery("#click-me-button").click(() => addClickedMessage())
    jQuery("body").append("<p>Hello World</p>")
  }
```

因为我们不再从 JS 中调用 `addClickedMessage` 所以我们可以移除 `@JSExportTopLevel` 和相关的 import  

最终我们在主函数中调用 `jQuery` 为了去计算 `setupUI` ,DOM 被加载一次:

```scala
def main():Unit = {
  jQuery(() => setupUI)
}
```

# 测试

当我们调用 `run` 命令的时候会报错,jQuery 没有被正确的加载,因为没有可用的 DOM 在 Node.js 里,我们需要在 `build.sbt` 中添加 : `jsDependencies += RuntimeDOM` ,然后我们使用 `jsdom` 假装 Node.js 中的 DOM ,使用之前我们需要安装 `npm install jsdom` 然后我们 `run` 会发现成功运行

就像其他依赖库,如果你依赖依赖于 DOM 的库,那么你只要 依赖 DOM 就可以.

## 添加 uTest

在 `build.sbt` 中添加:
```
libraryDependencies += "com.lihaoyi" %%% "utest" % "0.4.4" % "test"
testFrameworks += new TestFramework("utest.runner.Framework")
```

然后我们添加一个简单的测试单元:

```scala
//src/test/scala/tutorial/webapp/TutorialTest.scala

package tutorial.webapp

import utest._

import org.scalajs.jquery.jQuery

object TutorialTest extends TestSuite {

  // Initialize App
  TutorialApp.setupUI()

  def tests = TestSuite {
    'HelloWorld {
      assert(jQuery("p:contains('Hello World')").length == 1)
    }
  }
}
```
这个测试使用 jQuery 确认我们的页面 setup 后包含一个 `<p>` 成员包含字符文本 `HelloWorld`

## 一个更复杂的测试

我们也想测试我们的按钮的功能。为此，我们面临另一个小问题：测试时按钮不存在，因为测试以一个空的DOM树开头。为了解决这个问题，我们在setupUI方法中创建了一个按钮，并将其从HTML中删除:

```scala
jQuery("""<button type="button">Click me!</button>""")
  .click(addClickedMessage _)
  .appendTo(jQuery("body"))
```

这样带来了另一个优势,我们不再需要给他一个 ID 而可以直接使用 JQuery 对象去安装按钮控制器

现在我们在 `HelloWorld` 测试下定义 `ButtonClick` 测试:

```scala
'ButtonClick {
  def messageCount =
    jQuery("p:contains('You clicked the button!')").length

  val button = jQuery("button:contains('Click me!')")
  assert(button.length == 1)
  assert(messageCount == 0)

  for (c <- 1 to 5) {
    button.click()
    assert(messageCount == c)
  }
}
```

# full 优化

Scala.js sbt 拓展可以使用 Google Closure Compiler 的进一步优化 `>fullOptJS` ,如果你想要在 run 和 test 使用全优化版本,你需要改变 sbt 的 `stage`设置 `> set scalaJSStage in Global := FullOptStage`,我们也需要创建我们最终的全优化 HTML 文件 `scalajs-tutorial.html` 包含全优化代码:
```HTML
<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <title>The Scala.js Tutorial</title>
  </head>
  <body>
    <!-- Include JavaScript dependencies -->
    <script type="text/javascript" src="./target/scala-2.12/scala-js-tutorial-jsdeps.js"></script>
    <!-- Include Scala.js compiled code -->
    <script type="text/javascript" src="./target/scala-2.12/scala-js-tutorial-opt.js"></script>
  </body>
</html>
```

# 总结

安装程序依赖于服务器栈。一个常见的选择是 [sbt-web](https://github.com/sbt/sbt-web) ,[sbt-web-scalajs](https://github.com/vmunier/sbt-web-scalajs),[sbt-gzip](https://github.com/sbt/sbt-gzip) 如果你有play或AKKA-HTTP服务器
