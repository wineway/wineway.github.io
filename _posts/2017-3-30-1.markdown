---
layout:     post
title:      "[笔记]Scala学习笔记(1)"
author:     wineway
tags: 		Scala FunctionProgrammin 笔记
subtitle:   Scala函数式编程
category:  project1
visualworkflow: true
---
## 初识Scala函数式编程

### 概念:
- 引用透明: 函数不论进行任何操作都可以用他的返回值(value)代替.->这种行为称之为**代替模型**(substitute).使程序具备了**等式推理**(equational reasoning)的能力.
- 过程: 可能包含副作用的函数
- 闭包: 是一个函数,定义中包含了自由变量,函数中包含了环境信息,以绑定其引用的自由变量

> 尾递归: 一个调用自身的方法,有可能被子类中同名方法覆盖时尾递归是无效的

> 尾递归的trampoline优化: 一次调用各个函数完成一系列函数之间的循环,可以转化为循环?结果下一章说Scala编译器不对trampoline优化...

### 一个示例

`object`关键字用于创建一个单例类型,`Scala`中没有`static`的概念.

Scala函数定义形如:

```Scala
def abs[A](n: A): A =
  if (n < 0) -n
  else n
```
类型为 Int => Int,或 `Function1[A, A]` 的值,1表示接受一个参数.

>单参数方法可以用中缀方式使用,Scala中没有操作符的概念

- 匿名函数: 形如 `(x: A) => x==9` 也成**函数字面量**
- 匿名参数: 函数体只使用一次参数,使用占位符 `_` 代替命名参数(可以被自动类型推导)
- 函数往往可以推导出方法的返回类型,因此某些情况我们可以省略返回类型的显示声明,递归函数是个例外,执行与超过了函数体的范围,因此必须声明返回类型.但是通常情况下建议添加返回类型便于阅读.

>Scala为什么无法推导出方法的参数类型: 理论上类型推理算法执行了局部类型推导,这意味着推导无法作用于整个程序全局,而只能局限于某一特定域内.

|**什么时候需要显示的类型注解**|
|---------------------|
|1.声明了变量且没有初始化|
|2.所有的方法参数|
|3.方法的返回类型存在以下情况时:1.方法中显示的使用了 `return` 2.递归方法 3.两个或多个方法重载,其中一个方法调用了另一个重载方法,调用者需要现实的类型注解 4. Scala推断出的类型比你期望的宽泛|


### 偏应用函数与偏函数

- 偏函数: 并不处理所有可能输入,只处理和至少case语句匹配的输入,类型为:PartialFunction[Any, Type]

如果函数输入与所有语句都不匹配,跑出MatchError错误.

### 通过类型实现多态

没看懂为啥要这样叫,先跳过

## 函数式数据结构

函数式数据结构只能被纯函数操作,因此函数式数据结构被定义为不可变的.
```Scala
sealed trait List[+A] //trait 是一种可以包含具体方法的抽象接口
//sealed 表示这个特质的所有实现都必须定义在这个文件
//[+A]表示A是发生协变的
//Scala对任何case class/object 生成默认的def toString: String方法,#查看默认的toString实现
case object Nil extends List[Nothing]
case class Cons[+A](head: A, tail: List[A]) extends List[A]
//case 引入两种以上构造器
object List {
  def sum(ints: List[Int]): Int = ints match {
    case Nil => 0
    case Cons(x, xs) => x + sum(xs)
  }

  def product(ds: List[Double]): Double = ds match {
    case Nil => 1.0
    case Cons(0.0, _) => 0.0
    case Cons(x, xs) => x*product(xs)
  }

  def apply[A](as: A*): List[A] =
    if (as.isEmpty) Nil
    else Cons(as.head, apply(as.tail: _*))
}
```
- 型变(varian): +意味着A是协变或是正向的参数,意味着B是A的子类则 `List[B]` 是 `List[A]` 的子类.

- 伴生对象: 和数据类型同名的一个单例(object),通常在里面定义一些用于创建或处理数据类型的便捷方法.

- 工厂方法: 定义一个对象创建接口，但是让子类决定实例化哪个类。工厂方法让类的实例化延迟到子类。

`List` 类名后列出的参数列表就是类构造函数的参数列表,在Scala中整个类的主体就是这个类的构造函数,由于在 `list` 类声明之前输入了 `case` 关键字,因此每一个构造函数参数都自动转化为 `list` 实例的某一只读字段,你可以设置参数默认值.由于 `list` 类并没有主体, `case` 关键字的另一个特征就是让编译器自动为我们生成许多方法,包括类似于Java的String,equal,hashcode方法,`copy` 方法允许创建新实例得手只给出与原对象不同部分的参数, `case` 类最后一个特性就是生成一个伴生对象,伴生对象中自动添加了不少方法,比如 `apply` .

### 模式匹配

形如 `sum` 和 `product`

类似一个别致的 `switch` 声明,可以入侵到表达式的数据结构内部,对这个结构进行检验和提取子表达式.,如果目标和多个模式匹配则选择第一个匹配的.

使用面向对象编程时,永远不要在 `case` 语句上进行类型匹配,因为如果继承层次结构发生变化, `case` 表达式也会失效,作为替代方案,你应该是用多态函数

### ***可变参函数***

形如 `apply`

接收0个或多个类型为A的参数.
对于一个数据类型,在伴生对象中定义一个可变参的 `apply` 便与构造这个数据类型的实例是一种惯例

可变参函数显式的传输一系列(Scala的Seq类型)元素做的语法糖,Seq是Scala纪鹤路中的一个接口,他的实现有 `List` , `Queue` , `Vector` 等类似序列的数据结构,内部的 `as` 参数被绑定到一个 `Seq[A]` 类型上, Seq包含 `head` 和 `tail` 函数,**特殊的 `_*` 类型注释允许我们传入一个Seq到一个可变参数的方法.**

### 函数式数据结构中的数据共享

对一个列表修改返回一个新列表并不是真的要复制一份,而是可以直接复用他,这也成为*数据共享*

删除一个列表的第一个元素: `myList = Cons(x, xs)`,只需返回尾部的 `xs` ,并没有真正的删除元素.

### 改进高阶函数的类型推导

柯里化函数把参数分组有助于类型推导,一般来讲,函数定义包括多个参数组时,参数组里的类型信息从左到右传递,我们通常将函数参数分组排序成多个参数列表,来最大化利用类型推导

另一个优势是,我们可以用最后一个参数列表来推断隐含参数,隐含参数是 `implicit` 关键字声明的参数,当相应的方法调用时,我们可以显示的指定这个参数,当然也可以不指定,这编译器会在当前作用域找到一个合适的值作为参数,隐含参数可以代替参数默认值.

>implicit: 使方法或变量值可以用于隐含转换;将方法参数标记为可选的,只要在调用该方法时,作用于内有类型匹配的候选对象,就会使用该对象作为参数.



## 基于 list 的递归并泛化为高阶函数
